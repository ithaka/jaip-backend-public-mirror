generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alerts {
  id         Int            @id @default(autoincrement())
  text       String
  status     alert_statuses
  created_at DateTime?      @default(now()) @db.Timestamp(6)
  expires_at DateTime?      @default(dbgenerated("(CURRENT_DATE + '7 days'::interval)")) @db.Timestamp(6)
}

model entities {
  id                          Int                           @id @default(autoincrement())
  entity_type                 entity_types?
  name                        String                        @db.VarChar
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  facilities                  facilities?
  features_groups_entities    features_groups_entities[]
  globally_restricted_items   globally_restricted_items[]
  groups_entities             groups_entities[]
  statuses                    statuses[]
  ungrouped_features_entities ungrouped_features_entities[]
  users                       users?
  targeted_alerts             targeted_alerts[]
}

model targeted_alerts {
  id                Int                 @id @default(autoincrement())
  text              String
  status            alert_statuses
  start_date        DateTime
  end_date          DateTime
  is_active         Boolean
  entity_id         Int
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  alerts_facilities alerts_facilities[]
  alerts_groups     alerts_groups[]
  alerts_subdomains alerts_subdomains[]
  entities          entities            @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model alerts_facilities {
  alert_id        Int
  facility_id     Int
  targeted_alerts targeted_alerts @relation(fields: [alert_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  facilities      facilities      @relation(fields: [facility_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([alert_id, facility_id])
}

model alerts_groups {
  alert_id        Int
  group_id        Int
  targeted_alerts targeted_alerts @relation(fields: [alert_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups          groups          @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([alert_id, group_id])
}

model alerts_subdomains {
  alert_id        Int
  subdomain       String          @db.VarChar
  targeted_alerts targeted_alerts @relation(fields: [alert_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subdomains      subdomains      @relation(fields: [subdomain], references: [subdomain], onDelete: Cascade, onUpdate: NoAction)

  @@id([alert_id, subdomain])
}

model facilities {
  jstor_id              String                  @unique(map: "facilities_jstor_id_uq") @db.VarChar
  id                    Int                     @id(map: "pk_facilities")
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  entities              entities                @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ip_bypass             ip_bypass[]
  subdomains_facilities subdomains_facilities[]
  alerts_facilities     alerts_facilities[]
}

model features {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique @db.VarChar
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  updated_at               DateTime                   @default(now()) @db.Timestamp(6)
  display_name             String                     @unique @db.VarChar
  category                 String                     @db.VarChar
  description              String
  is_protected             Boolean
  is_admin_only            Boolean
  is_active                Boolean                    @default(true)
  features_groups_entities features_groups_entities[]
}

model features_groups_entities {
  group_id   Int
  entity_id  Int
  feature_id Int
  enabled    Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  features   features  @relation(fields: [feature_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups     groups    @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([group_id, entity_id, feature_id])
}

model groups {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique(map: "groups_name_uq") @db.VarChar
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  updated_at               DateTime                   @default(now()) @db.Timestamp(6)
  is_active                Boolean                    @default(true)
  features_groups_entities features_groups_entities[]
  groups_entities          groups_entities[]
  statuses                 statuses[]
  alerts_groups            alerts_groups[]
}

model groups_entities {
  id         Int         @default(autoincrement())
  group_id   Int
  entity_id  Int
  role       user_roles?
  updated_at DateTime?   @default(now()) @db.Timestamp(6)
  entities   entities    @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups     groups      @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([group_id, entity_id])
  @@index([id, group_id, entity_id])
  @@index([id, group_id, entity_id], map: "groups_entitites_id_group_id_entity_id_idx")
}

model ip_bypass {
  id          Int         @id @default(autoincrement())
  facility_id Int?
  ip          String?     @db.VarChar
  created_at  DateTime?   @default(now()) @db.Timestamp(6)
  facilities  facilities? @relation(fields: [facility_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model status_details {
  id        Int       @id @default(autoincrement())
  status_id Int?
  type      String?   @db.VarChar
  detail    String?
  statuses  statuses? @relation(fields: [status_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model statuses {
  id              Int              @id @default(autoincrement())
  entity_id       Int?
  jstor_item_id   String?          @db.VarChar
  jstor_item_type jstor_types?
  status          status_options?
  group_id        Int?
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  status_details  status_details[]
  entities        entities?        @relation(fields: [entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  groups          groups?          @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "statuses_group_fkey")

  @@index([id, jstor_item_id, jstor_item_type, status, group_id], map: "statuses_id_jstor_item_id_jstor_item_type_status_group_idx")
}

model globally_restricted_items {
  id            Int      @id @default(autoincrement())
  entity_id     Int
  jstor_item_id String   @unique @db.VarChar
  reason        String
  is_restricted Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  entities      entities @relation(fields: [entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id, jstor_item_id, reason, is_restricted])
}

model subdomains {
  id                    Int                     @id @default(autoincrement())
  subdomain             String                  @unique @db.VarChar
  entity_type           entity_types
  is_active             Boolean                 @default(true)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  subdomains_facilities subdomains_facilities[]
  alerts_subdomains     alerts_subdomains[]
}

model subdomains_facilities {
  subdomain   String     @db.VarChar
  sitecode    String     @db.VarChar
  facility_id Int
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)
  facilities  facilities @relation(fields: [facility_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subdomains  subdomains @relation(fields: [subdomain], references: [subdomain], onDelete: Cascade, onUpdate: NoAction)

  @@id([subdomain, sitecode])
}

model tokens {
  id         Int       @id @default(autoincrement())
  token      String    @db.VarChar
  is_active  Boolean
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}
model ungrouped_features {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @unique @db.VarChar
  display_name                String                        @unique @db.VarChar
  category                    String                        @db.VarChar
  description                 String
  created_at                  DateTime                      @default(now()) @db.Timestamp(6)
  updated_at                  DateTime                      @default(now()) @db.Timestamp(6)
  is_active                   Boolean                       @default(true)
  ungrouped_features_entities ungrouped_features_entities[]
}

model ungrouped_features_entities {
  id                 Int                @default(autoincrement())
  feature_id         Int
  entity_id          Int
  enabled            Boolean?           @default(true)
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  updated_at         DateTime?          @default(now()) @db.Timestamp(6)
  entities           entities           @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ungrouped_features ungrouped_features @relation(fields: [feature_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([feature_id, entity_id])
  @@index([id, feature_id, entity_id])
}

model users {
  jstor_id   String    @unique(map: "users_jstor_id_uq") @db.VarChar
  id         Int       @id(map: "pk_users")
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  entities   entities  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum entity_types {
  programs
  users
  facilities
}

enum jstor_types {
  doi
  headid
  discipline
}

enum status_options {
  Pending
  Approved
  Denied
  Incomplete
}

enum user_roles {
  admin
  user
  removed
}

enum alert_statuses {
  info
  warning
  error
  success
}
